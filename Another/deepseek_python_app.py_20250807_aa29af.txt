import os
import numpy as np
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import cv2

app = Flask(__name__)

# Configuration
UPLOAD_FOLDER = 'uploads'
ALLOWED_IMAGE_EXTENSIONS = {'png', 'jpg', 'jpeg'}
ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'avi', 'mov'}
MODEL_PATH = 'models/deepfake_detection_model.h5'

# Create upload folder if not exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Load pre-trained model
model = load_model(MODEL_PATH)
print("Model loaded successfully")

def allowed_image_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_IMAGE_EXTENSIONS

def allowed_video_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_VIDEO_EXTENSIONS

def preprocess_image(img_path, target_size=(224, 224)):
    """Preprocess image for model prediction"""
    img = image.load_img(img_path, target_size=target_size)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
    return img_array

def predict_image(model, img_path):
    """Predict if image is deepfake"""
    processed_img = preprocess_image(img_path)
    prediction = model.predict(processed_img)
    confidence = float(prediction[0][0])
    is_deepfake = confidence > 0.5
    return is_deepfake, confidence

def analyze_video_frames(model, video_path, frame_interval=10):
    """Analyze video by sampling frames"""
    cap = cv2.VideoCapture(video_path)
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    deepfake_count = 0
    processed_count = 0
    
    for frame_idx in range(0, total_frames, frame_interval):
        cap.set(cv2.CAP_PROP_POS_FRAMES, frame_idx)
        ret, frame = cap.read()
        
        if not ret:
            break
            
        # Save frame temporarily
        frame_path = os.path.join(UPLOAD_FOLDER, f"frame_{frame_idx}.jpg")
        cv2.imwrite(frame_path, frame)
        
        # Predict frame
        is_deepfake, confidence = predict_image(model, frame_path)
        if is_deepfake:
            deepfake_count += 1
        processed_count += 1
        
        # Clean up
        os.remove(frame_path)
    
    cap.release()
    
    if processed_count == 0:
        return False, 0.0
    
    deepfake_ratio = deepfake_count / processed_count
    is_deepfake_video = deepfake_ratio > 0.5
    return is_deepfake_video, deepfake_ratio

@app.route('/analyze-image', methods=['POST'])
def analyze_image():
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
        
    if not allowed_image_file(file.filename):
        return jsonify({'error': 'Invalid file type'}), 400
        
    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)
    
    try:
        is_deepfake, confidence = predict_image(model, filepath)
        return jsonify({
            'prediction': 'deepfake' if is_deepfake else 'authentic',
            'confidence': confidence,
            'is_deepfake': is_deepfake
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        os.remove(filepath)

@app.route('/analyze-video', methods=['POST'])
def analyze_video():
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
        
    if not allowed_video_file(file.filename):
        return jsonify({'error': 'Invalid file type'}), 400
        
    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)
    
    try:
        is_deepfake, confidence = analyze_video_frames(model, filepath)
        return jsonify({
            'prediction': 'deepfake' if is_deepfake else 'authentic',
            'confidence': confidence,
            'is_deepfake': is_deepfake
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        os.remove(filepath)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)